"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./instrumentation");
require("dotenv/config");
const openai_1 = require("@langchain/openai");
const messages_1 = require("@langchain/core/messages");
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    const chatModel = new openai_1.ChatOpenAI({
        openAIApiKey: process.env.OPENAI_API_KEY,
        metadata: {
            session_id: "test-session-123",
        },
    });
    const request = new messages_1.HumanMessage("Hello! How are you?");
    const response = yield chatModel.invoke([request]);
    // get a new response, including a greeting in the message history
    const finalResponse = yield chatModel.invoke([
        request,
        response,
        new messages_1.HumanMessage("That is great to hear!"),
    ]);
    // eslint-disable-next-line no-console
    console.log(finalResponse.content);
    return finalResponse;
});
main();
//# sourceMappingURL=chat.js.map