"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertUnreachable = assertUnreachable;
exports.isObject = isObject;
exports.isString = isString;
exports.isNumber = isNumber;
exports.isNonEmptyArray = isNonEmptyArray;
/**
 * Utility function that uses the type system to check if a switch statement is exhaustive.
 * If the switch statement is not exhaustive, there will be a type error caught in typescript
 *
 * See https://stackoverflow.com/questions/39419170/how-do-i-check-that-a-switch-block-is-exhaustive-in-typescript for more details.
 */
function assertUnreachable(_) {
    throw new Error("Unreachable");
}
/**
 * A type-guard function for checking if a value is an object
 */
function isObject(value) {
    return typeof value === "object" && value != null && !Array.isArray(value);
}
function isString(value) {
    return typeof value === "string";
}
function isNumber(value) {
    return typeof value === "number";
}
function isNonEmptyArray(value) {
    return value != null && Array.isArray(value) && value.length > 0;
}
//# sourceMappingURL=typeUtils.js.map