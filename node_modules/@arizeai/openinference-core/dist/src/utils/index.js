"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safelyJSONParse = exports.safelyJSONStringify = void 0;
exports.withSafety = withSafety;
__exportStar(require("./typeUtils"), exports);
/**
 * Wraps a function with a try-catch block to catch and log any errors.
 * @param fn - A function to wrap with a try-catch block.
 * @returns A function that returns null if an error is thrown.
 */
function withSafety({ fn, onError, }) {
    return (...args) => {
        try {
            return fn(...args);
        }
        catch (error) {
            if (onError) {
                onError(error);
            }
            return null;
        }
    };
}
exports.safelyJSONStringify = withSafety({ fn: JSON.stringify });
exports.safelyJSONParse = withSafety({ fn: JSON.parse });
//# sourceMappingURL=index.js.map