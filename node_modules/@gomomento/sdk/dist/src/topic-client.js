"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicClient = void 0;
const AbstractTopicClient_1 = require("@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractTopicClient");
const _1 = require(".");
const pubsub_client_1 = require("./internal/pubsub-client");
const webhook_client_1 = require("./internal/webhook-client");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const sdk_core_1 = require("@gomomento/sdk-core");
/**
 * Momento Topic Client.
 *
 * Publish and subscribe to topics.
 */
class TopicClient extends AbstractTopicClient_1.AbstractTopicClient {
    /**
     * Creates an instance of TopicClient.
     */
    constructor(props) {
        var _a, _b;
        const allProps = {
            credentialProvider: (_a = props === null || props === void 0 ? void 0 : props.credentialProvider) !== null && _a !== void 0 ? _a : (0, sdk_core_1.getDefaultCredentialProvider)(),
            configuration: (_b = props === null || props === void 0 ? void 0 : props.configuration) !== null && _b !== void 0 ? _b : getDefaultTopicClientConfiguration(),
        };
        const logger = allProps.configuration
            .getLoggerFactory()
            .getLogger('TopicClient');
        const grpcConfig = allProps.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        let numStreamClients;
        let numUnaryClients;
        const hasNumClients = grpcConfig.getNumClients() !== undefined;
        const hasStreamClients = grpcConfig.getNumStreamClients() !== undefined;
        const hasUnaryClients = grpcConfig.getNumUnaryClients() !== undefined;
        if (hasNumClients && !hasStreamClients && !hasUnaryClients) {
            // `numClients` is deprecated, but if it is set, we will use it to set the number of stream and unary clients
            logger.info('`numClients` is deprecated but was provided; defaulting both `numStreamClients` and `numUnaryClients` to %d', grpcConfig.getNumClients());
            numStreamClients = grpcConfig.getNumClients();
            numUnaryClients = grpcConfig.getNumClients();
        }
        else {
            numStreamClients = grpcConfig.getNumStreamClients();
            numUnaryClients = grpcConfig.getNumUnaryClients();
        }
        super(allProps.configuration.getLoggerFactory().getLogger(TopicClient.name), (0, utils_1.range)(numStreamClients).map(_ => new pubsub_client_1.PubsubClient(allProps)), (0, utils_1.range)(numUnaryClients).map(_ => new pubsub_client_1.PubsubClient(allProps)), new webhook_client_1.WebhookClient(allProps));
        this.logger.debug('Instantiated Momento TopicClient');
        allProps.configuration.getMiddlewares().forEach(m => {
            if (m.init) {
                m.init();
            }
        });
    }
}
exports.TopicClient = TopicClient;
function getDefaultTopicClientConfiguration() {
    const config = _1.TopicConfigurations.Default.latest();
    const logger = config.getLoggerFactory().getLogger('TopicClient');
    logger.info('No configuration provided to TopicClient. Using latest "Default" configuration, suitable for development. For production use, consider specifying an explicit configuration.');
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMtY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RvcGljLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrSEFBNkc7QUFDN0csd0JBQTBEO0FBQzFELDREQUFzRDtBQUV0RCw4REFBd0Q7QUFFeEQsdUVBQWtFO0FBQ2xFLGtEQUFpRTtBQUVqRTs7OztHQUlHO0FBQ0gsTUFBYSxXQUFZLFNBQVEseUNBQW1CO0lBQ2xEOztPQUVHO0lBQ0gsWUFBWSxLQUF3Qjs7UUFDbEMsTUFBTSxRQUFRLEdBQXdCO1lBQ3BDLGtCQUFrQixFQUNoQixNQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxrQkFBa0IsbUNBQUksSUFBQSx1Q0FBNEIsR0FBRTtZQUM3RCxhQUFhLEVBQ1gsTUFBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsYUFBYSxtQ0FBSSxrQ0FBa0MsRUFBRTtTQUMvRCxDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWE7YUFDbEMsZ0JBQWdCLEVBQUU7YUFDbEIsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTVCLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhO2FBQ3RDLG9CQUFvQixFQUFFO2FBQ3RCLGFBQWEsRUFBRSxDQUFDO1FBRW5CLElBQUksZ0JBQXdCLENBQUM7UUFDN0IsSUFBSSxlQUF1QixDQUFDO1FBRTVCLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxTQUFTLENBQUM7UUFDL0QsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxTQUFTLENBQUM7UUFDeEUsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixFQUFFLEtBQUssU0FBUyxDQUFDO1FBRXRFLElBQUksYUFBYSxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDMUQsNkdBQTZHO1lBQzdHLE1BQU0sQ0FBQyxJQUFJLENBQ1QsNkdBQTZHLEVBQzdHLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FDM0IsQ0FBQztZQUNGLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM5QyxlQUFlLEdBQUcsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzlDO2FBQU07WUFDTCxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNwRCxlQUFlLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDbkQ7UUFFRCxLQUFLLENBQ0gsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQ3JFLElBQUEsYUFBSyxFQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSw0QkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzVELElBQUEsYUFBSyxFQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksNEJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUMzRCxJQUFJLDhCQUFhLENBQUMsUUFBUSxDQUFDLENBQzVCLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRXRELFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDVixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDVjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdkRELGtDQXVEQztBQUVELFNBQVMsa0NBQWtDO0lBQ3pDLE1BQU0sTUFBTSxHQUFHLHNCQUFtQixDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLElBQUksQ0FDVCw4S0FBOEssQ0FDL0ssQ0FBQztJQUNGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fic3RyYWN0VG9waWNDbGllbnR9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvY2xpZW50cy9wdWJzdWIvQWJzdHJhY3RUb3BpY0NsaWVudCc7XG5pbXBvcnQge1RvcGljQ29uZmlndXJhdGlvbiwgVG9waWNDb25maWd1cmF0aW9uc30gZnJvbSAnLic7XG5pbXBvcnQge1B1YnN1YkNsaWVudH0gZnJvbSAnLi9pbnRlcm5hbC9wdWJzdWItY2xpZW50JztcbmltcG9ydCB7VG9waWNDbGllbnRQcm9wc30gZnJvbSAnLi90b3BpYy1jbGllbnQtcHJvcHMnO1xuaW1wb3J0IHtXZWJob29rQ2xpZW50fSBmcm9tICcuL2ludGVybmFsL3dlYmhvb2stY2xpZW50JztcbmltcG9ydCB7VG9waWNDbGllbnRBbGxQcm9wc30gZnJvbSAnLi9pbnRlcm5hbC90b3BpYy1jbGllbnQtYWxsLXByb3BzJztcbmltcG9ydCB7cmFuZ2V9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHtnZXREZWZhdWx0Q3JlZGVudGlhbFByb3ZpZGVyfSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlJztcblxuLyoqXG4gKiBNb21lbnRvIFRvcGljIENsaWVudC5cbiAqXG4gKiBQdWJsaXNoIGFuZCBzdWJzY3JpYmUgdG8gdG9waWNzLlxuICovXG5leHBvcnQgY2xhc3MgVG9waWNDbGllbnQgZXh0ZW5kcyBBYnN0cmFjdFRvcGljQ2xpZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVG9waWNDbGllbnQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wcz86IFRvcGljQ2xpZW50UHJvcHMpIHtcbiAgICBjb25zdCBhbGxQcm9wczogVG9waWNDbGllbnRBbGxQcm9wcyA9IHtcbiAgICAgIGNyZWRlbnRpYWxQcm92aWRlcjpcbiAgICAgICAgcHJvcHM/LmNyZWRlbnRpYWxQcm92aWRlciA/PyBnZXREZWZhdWx0Q3JlZGVudGlhbFByb3ZpZGVyKCksXG4gICAgICBjb25maWd1cmF0aW9uOlxuICAgICAgICBwcm9wcz8uY29uZmlndXJhdGlvbiA/PyBnZXREZWZhdWx0VG9waWNDbGllbnRDb25maWd1cmF0aW9uKCksXG4gICAgfTtcblxuICAgIGNvbnN0IGxvZ2dlciA9IGFsbFByb3BzLmNvbmZpZ3VyYXRpb25cbiAgICAgIC5nZXRMb2dnZXJGYWN0b3J5KClcbiAgICAgIC5nZXRMb2dnZXIoJ1RvcGljQ2xpZW50Jyk7XG5cbiAgICBjb25zdCBncnBjQ29uZmlnID0gYWxsUHJvcHMuY29uZmlndXJhdGlvblxuICAgICAgLmdldFRyYW5zcG9ydFN0cmF0ZWd5KClcbiAgICAgIC5nZXRHcnBjQ29uZmlnKCk7XG5cbiAgICBsZXQgbnVtU3RyZWFtQ2xpZW50czogbnVtYmVyO1xuICAgIGxldCBudW1VbmFyeUNsaWVudHM6IG51bWJlcjtcblxuICAgIGNvbnN0IGhhc051bUNsaWVudHMgPSBncnBjQ29uZmlnLmdldE51bUNsaWVudHMoKSAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGhhc1N0cmVhbUNsaWVudHMgPSBncnBjQ29uZmlnLmdldE51bVN0cmVhbUNsaWVudHMoKSAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGhhc1VuYXJ5Q2xpZW50cyA9IGdycGNDb25maWcuZ2V0TnVtVW5hcnlDbGllbnRzKCkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChoYXNOdW1DbGllbnRzICYmICFoYXNTdHJlYW1DbGllbnRzICYmICFoYXNVbmFyeUNsaWVudHMpIHtcbiAgICAgIC8vIGBudW1DbGllbnRzYCBpcyBkZXByZWNhdGVkLCBidXQgaWYgaXQgaXMgc2V0LCB3ZSB3aWxsIHVzZSBpdCB0byBzZXQgdGhlIG51bWJlciBvZiBzdHJlYW0gYW5kIHVuYXJ5IGNsaWVudHNcbiAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAnYG51bUNsaWVudHNgIGlzIGRlcHJlY2F0ZWQgYnV0IHdhcyBwcm92aWRlZDsgZGVmYXVsdGluZyBib3RoIGBudW1TdHJlYW1DbGllbnRzYCBhbmQgYG51bVVuYXJ5Q2xpZW50c2AgdG8gJWQnLFxuICAgICAgICBncnBjQ29uZmlnLmdldE51bUNsaWVudHMoKVxuICAgICAgKTtcbiAgICAgIG51bVN0cmVhbUNsaWVudHMgPSBncnBjQ29uZmlnLmdldE51bUNsaWVudHMoKTtcbiAgICAgIG51bVVuYXJ5Q2xpZW50cyA9IGdycGNDb25maWcuZ2V0TnVtQ2xpZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1TdHJlYW1DbGllbnRzID0gZ3JwY0NvbmZpZy5nZXROdW1TdHJlYW1DbGllbnRzKCk7XG4gICAgICBudW1VbmFyeUNsaWVudHMgPSBncnBjQ29uZmlnLmdldE51bVVuYXJ5Q2xpZW50cygpO1xuICAgIH1cblxuICAgIHN1cGVyKFxuICAgICAgYWxsUHJvcHMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCkuZ2V0TG9nZ2VyKFRvcGljQ2xpZW50Lm5hbWUpLFxuICAgICAgcmFuZ2UobnVtU3RyZWFtQ2xpZW50cykubWFwKF8gPT4gbmV3IFB1YnN1YkNsaWVudChhbGxQcm9wcykpLFxuICAgICAgcmFuZ2UobnVtVW5hcnlDbGllbnRzKS5tYXAoXyA9PiBuZXcgUHVic3ViQ2xpZW50KGFsbFByb3BzKSksXG4gICAgICBuZXcgV2ViaG9va0NsaWVudChhbGxQcm9wcylcbiAgICApO1xuXG4gICAgdGhpcy5sb2dnZXIuZGVidWcoJ0luc3RhbnRpYXRlZCBNb21lbnRvIFRvcGljQ2xpZW50Jyk7XG5cbiAgICBhbGxQcm9wcy5jb25maWd1cmF0aW9uLmdldE1pZGRsZXdhcmVzKCkuZm9yRWFjaChtID0+IHtcbiAgICAgIGlmIChtLmluaXQpIHtcbiAgICAgICAgbS5pbml0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFRvcGljQ2xpZW50Q29uZmlndXJhdGlvbigpOiBUb3BpY0NvbmZpZ3VyYXRpb24ge1xuICBjb25zdCBjb25maWcgPSBUb3BpY0NvbmZpZ3VyYXRpb25zLkRlZmF1bHQubGF0ZXN0KCk7XG4gIGNvbnN0IGxvZ2dlciA9IGNvbmZpZy5nZXRMb2dnZXJGYWN0b3J5KCkuZ2V0TG9nZ2VyKCdUb3BpY0NsaWVudCcpO1xuICBsb2dnZXIuaW5mbyhcbiAgICAnTm8gY29uZmlndXJhdGlvbiBwcm92aWRlZCB0byBUb3BpY0NsaWVudC4gVXNpbmcgbGF0ZXN0IFwiRGVmYXVsdFwiIGNvbmZpZ3VyYXRpb24sIHN1aXRhYmxlIGZvciBkZXZlbG9wbWVudC4gRm9yIHByb2R1Y3Rpb24gdXNlLCBjb25zaWRlciBzcGVjaWZ5aW5nIGFuIGV4cGxpY2l0IGNvbmZpZ3VyYXRpb24uJ1xuICApO1xuICByZXR1cm4gY29uZmlnO1xufVxuIl19