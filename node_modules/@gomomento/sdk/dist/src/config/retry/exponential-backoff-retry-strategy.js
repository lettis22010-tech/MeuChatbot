"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExponentialBackoffRetryStrategy = void 0;
const __1 = require("../..");
/*
 * Default parameters
 */
/**
 * Default initial delay for the first retry (in milliseconds).
 *
 * Note that Node.js `setTimeout` has a resolution of 1ms, so
 * the actual delay may be slightly longer.
 */
const DEFAULT_INITIAL_DELAY_MS = 0.5;
/**
 * Default growth factor for exponential backoff
 */
const DEFAULT_GROWTH_FACTOR = 2;
/**
 * Default maximum delay to cap the exponential growth (in milliseconds)
 */
const DEFAULT_MAX_BACKOFF_MS = 8.0;
/**
 * Retry strategy that uses exponential backoff with decorrelated jitter.
 *
 * The backoff for each attempt is calculated as follows:
 * - The first retry has a fixed delay of `initialDelayMillis`
 * - Backoff for subsequent retries is calculated as `initialDelayMillis * 2^attemptNumber`
 * - Subsequent retries have a delay that is a random value between
 *   the current backoff and 3 times the previous backoff, with the
 *.  current backoff capped at `maxBackoffMillis`
 */
class ExponentialBackoffRetryStrategy {
    constructor(props) {
        var _a, _b, _c;
        this.logger = props.loggerFactory.getLogger(this);
        this.eligibilityStrategy =
            (_a = props.eligibilityStrategy) !== null && _a !== void 0 ? _a : new __1.DefaultEligibilityStrategy(props.loggerFactory);
        this.initialDelayMillis =
            (_b = props.initialDelayMillis) !== null && _b !== void 0 ? _b : DEFAULT_INITIAL_DELAY_MS;
        this.growthFactor = DEFAULT_GROWTH_FACTOR;
        this.maxBackoffMillis = (_c = props.maxBackoffMillis) !== null && _c !== void 0 ? _c : DEFAULT_MAX_BACKOFF_MS;
    }
    determineWhenToRetryRequest(props) {
        this.logger.debug(`Determining whether request is eligible for retry; status code: ${props.grpcStatus.code}, request type: ${props.grpcRequest.path}, attemptNumber: ${props.attemptNumber}`);
        if (!this.eligibilityStrategy.isEligibleForRetry(props)) {
            this.logger.debug('Request is not eligible for retry.');
            return null; // Do not retry
        }
        const baseDelay = Math.min(this.computeBaseDelay(props.attemptNumber), this.maxBackoffMillis);
        const previousBaseDelay = this.computePreviousBaseDelay(baseDelay);
        const maxDelay = previousBaseDelay * 3;
        const jitteredDelay = randomInRange(baseDelay, maxDelay);
        this.logger.debug(`ExponentialBackoffRetryStrategy: attempt #${props.attemptNumber}` +
            ` -> base delay=${baseDelay}ms, max delay=${maxDelay}ms, jittered delay=${jitteredDelay}ms`);
        return jitteredDelay;
    }
    /**
     * Compute the backoffed base delay for the given attempt number.
     * @param attemptNumber - The attempt number (0-based)
     * @returns The base delay for the given attempt number
     */
    computeBaseDelay(attemptNumber) {
        if (attemptNumber <= 0) {
            return this.initialDelayMillis;
        }
        else {
            return (this.initialDelayMillis * Math.pow(this.growthFactor, attemptNumber));
        }
    }
    computePreviousBaseDelay(currentBaseDelay) {
        return currentBaseDelay / this.growthFactor;
    }
}
exports.ExponentialBackoffRetryStrategy = ExponentialBackoffRetryStrategy;
/**
 * Generate a uniform random number in the range [min, max)
 * @param min - Minimum value (inclusive)
 * @param max - Maximum value (exclusive)
 * @returns A random number in the range [min, max)
 */
function randomInRange(min, max) {
    if (min >= max) {
        return min;
    }
    return round(min + Math.random() * (max - min), 3);
}
/**
 * Round a number to a given number of decimal places
 *
 * @param value - The value to round
 * @param decimals - The number of decimal places
 * @returns The rounded value
 */
function round(value, decimals) {
    const factor = Math.pow(10, decimals);
    return Math.round(value * factor) / factor;
}
//# sourceMappingURL=data:application/json;base64,