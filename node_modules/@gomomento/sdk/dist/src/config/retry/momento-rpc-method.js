"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MomentoRPCMethodMetadataConverter = exports.MomentoRPCMethod = void 0;
var MomentoRPCMethod;
(function (MomentoRPCMethod) {
    MomentoRPCMethod["Get"] = "_GetRequest";
    MomentoRPCMethod["GetWithHash"] = "_GetWithHashRequest";
    MomentoRPCMethod["Set"] = "_SetRequest";
    MomentoRPCMethod["Delete"] = "_DeleteRequest";
    MomentoRPCMethod["Increment"] = "_IncrementRequest";
    MomentoRPCMethod["SetIf"] = "_SetIfRequest";
    MomentoRPCMethod["SetIfHash"] = "_SetIfHashRequest";
    MomentoRPCMethod["SetIfNotExists"] = "_SetIfNotExistsRequest";
    MomentoRPCMethod["GetBatch"] = "_GetBatchRequest";
    MomentoRPCMethod["SetBatch"] = "_SetBatchRequest";
    MomentoRPCMethod["KeysExist"] = "_KeysExistRequest";
    MomentoRPCMethod["UpdateTtl"] = "_UpdateTtlRequest";
    MomentoRPCMethod["ItemGetTtl"] = "_ItemGetTtlRequest";
    MomentoRPCMethod["ItemGetType"] = "_ItemGetTypeRequest";
    MomentoRPCMethod["DictionaryGet"] = "_DictionaryGetRequest";
    MomentoRPCMethod["DictionaryFetch"] = "_DictionaryFetchRequest";
    MomentoRPCMethod["DictionarySet"] = "_DictionarySetRequest";
    MomentoRPCMethod["DictionaryIncrement"] = "_DictionaryIncrementRequest";
    MomentoRPCMethod["DictionaryDelete"] = "_DictionaryDeleteRequest";
    MomentoRPCMethod["DictionaryLength"] = "_DictionaryLengthRequest";
    MomentoRPCMethod["SetFetch"] = "_SetFetchRequest";
    MomentoRPCMethod["SetSample"] = "_SetSampleRequest";
    MomentoRPCMethod["SetUnion"] = "_SetUnionRequest";
    MomentoRPCMethod["SetDifference"] = "_SetDifferenceRequest";
    MomentoRPCMethod["SetContains"] = "_SetContainsRequest";
    MomentoRPCMethod["SetLength"] = "_SetLengthRequest";
    MomentoRPCMethod["SetPop"] = "_SetPopRequest";
    MomentoRPCMethod["ListPushFront"] = "_ListPushFrontRequest";
    MomentoRPCMethod["ListPushBack"] = "_ListPushBackRequest";
    MomentoRPCMethod["ListPopFront"] = "_ListPopFrontRequest";
    MomentoRPCMethod["ListPopBack"] = "_ListPopBackRequest";
    MomentoRPCMethod["ListErase"] = "_ListEraseRequest";
    MomentoRPCMethod["ListRemove"] = "_ListRemoveRequest";
    MomentoRPCMethod["ListFetch"] = "_ListFetchRequest";
    MomentoRPCMethod["ListLength"] = "_ListLengthRequest";
    MomentoRPCMethod["ListConcatenateFront"] = "_ListConcatenateFrontRequest";
    MomentoRPCMethod["ListConcatenateBack"] = "_ListConcatenateBackRequest";
    MomentoRPCMethod["ListRetain"] = "_ListRetainRequest";
    MomentoRPCMethod["SortedSetPut"] = "_SortedSetPutRequest";
    MomentoRPCMethod["SortedSetFetch"] = "_SortedSetFetchRequest";
    MomentoRPCMethod["SortedSetGetScore"] = "_SortedSetGetScoreRequest";
    MomentoRPCMethod["SortedSetRemove"] = "_SortedSetRemoveRequest";
    MomentoRPCMethod["SortedSetIncrement"] = "_SortedSetIncrementRequest";
    MomentoRPCMethod["SortedSetGetRank"] = "_SortedSetGetRankRequest";
    MomentoRPCMethod["SortedSetLength"] = "_SortedSetLengthRequest";
    MomentoRPCMethod["SortedSetLengthByScore"] = "_SortedSetLengthByScoreRequest";
    MomentoRPCMethod["TopicPublish"] = "_PublishRequest";
    MomentoRPCMethod["TopicSubscribe"] = "_SubscriptionRequest";
})(MomentoRPCMethod || (MomentoRPCMethod = {}));
exports.MomentoRPCMethod = MomentoRPCMethod;
class MomentoRPCMethodMetadataConverter {
    /**
     * Converts a MomentoRPCMethod enum value to its corresponding metadata type.
     * @param rpcMethod - The rpc method to convert.
     * @returns The corresponding metadata type.
     */
    static convert(rpcMethod) {
        const metadataType = this.rpcMethodToMetadataMap[rpcMethod];
        if (!metadataType) {
            throw new Error(`Unsupported MomentoRPCMethod: ${rpcMethod}`);
        }
        return metadataType;
    }
}
exports.MomentoRPCMethodMetadataConverter = MomentoRPCMethodMetadataConverter;
MomentoRPCMethodMetadataConverter.rpcMethodToMetadataMap = {
    [MomentoRPCMethod.Get]: 'get',
    [MomentoRPCMethod.GetWithHash]: 'get-with-hash',
    [MomentoRPCMethod.Set]: 'set',
    [MomentoRPCMethod.SetIfHash]: 'set-if-hash',
    [MomentoRPCMethod.Delete]: 'delete',
    [MomentoRPCMethod.Increment]: 'increment',
    [MomentoRPCMethod.SetIf]: 'set-if',
    [MomentoRPCMethod.SetIfNotExists]: 'set-if',
    [MomentoRPCMethod.GetBatch]: 'get-batch',
    [MomentoRPCMethod.SetBatch]: 'set-batch',
    [MomentoRPCMethod.KeysExist]: 'keys-exist',
    [MomentoRPCMethod.UpdateTtl]: 'update-ttl',
    [MomentoRPCMethod.ItemGetTtl]: 'item-get-ttl',
    [MomentoRPCMethod.ItemGetType]: 'item-get-type',
    // Special cases as accepted by momento-local: https://github.com/momentohq/momento-local/blob/main/src/cache/service/middlewares/rpc.rs#L51
    [MomentoRPCMethod.DictionarySet]: 'dictionary-set',
    [MomentoRPCMethod.DictionaryGet]: 'dictionary-get',
    [MomentoRPCMethod.DictionaryFetch]: 'dictionary-fetch',
    [MomentoRPCMethod.DictionaryIncrement]: 'dictionary-increment',
    [MomentoRPCMethod.DictionaryDelete]: 'dictionary-delete',
    [MomentoRPCMethod.DictionaryLength]: 'dictionary-length',
    [MomentoRPCMethod.SetFetch]: 'set-fetch',
    [MomentoRPCMethod.SetSample]: 'set-sample',
    [MomentoRPCMethod.SetUnion]: 'set-union',
    [MomentoRPCMethod.SetDifference]: 'set-difference',
    [MomentoRPCMethod.SetContains]: 'set-contains',
    [MomentoRPCMethod.SetLength]: 'set-length',
    [MomentoRPCMethod.SetPop]: 'set-pop',
    [MomentoRPCMethod.ListPushFront]: 'list-push-front',
    [MomentoRPCMethod.ListPushBack]: 'list-push-back',
    [MomentoRPCMethod.ListPopFront]: 'list-pop-front',
    [MomentoRPCMethod.ListPopBack]: 'list-pop-back',
    [MomentoRPCMethod.ListErase]: 'list-remove',
    [MomentoRPCMethod.ListRemove]: 'list-remove',
    [MomentoRPCMethod.ListFetch]: 'list-fetch',
    [MomentoRPCMethod.ListLength]: 'list-length',
    [MomentoRPCMethod.ListConcatenateFront]: 'list-concatenate-front',
    [MomentoRPCMethod.ListConcatenateBack]: 'list-concatenate-back',
    [MomentoRPCMethod.ListRetain]: 'list-retain',
    [MomentoRPCMethod.SortedSetPut]: 'sorted-set-put',
    [MomentoRPCMethod.SortedSetFetch]: 'sorted-set-fetch',
    [MomentoRPCMethod.SortedSetGetScore]: 'sorted-set-get-score',
    [MomentoRPCMethod.SortedSetRemove]: 'sorted-set-remove',
    [MomentoRPCMethod.SortedSetIncrement]: 'sorted-set-increment',
    [MomentoRPCMethod.SortedSetGetRank]: 'sorted-set-get-rank',
    [MomentoRPCMethod.SortedSetLength]: 'sorted-set-length',
    [MomentoRPCMethod.SortedSetLengthByScore]: 'sorted-set-length-by-score',
    [MomentoRPCMethod.TopicPublish]: 'topic-publish',
    [MomentoRPCMethod.TopicSubscribe]: 'topic-subscribe',
};
//# sourceMappingURL=data:application/json;base64,