"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticTopicTransportStrategy = exports.StaticTopicGrpcConfiguration = void 0;
const topic_configurations_1 = require("../../topic-configurations");
class StaticTopicGrpcConfiguration {
    constructor(props) {
        if (props.numStreamClients !== undefined &&
            props.numStreamClients !== null) {
            this.numStreamClients = props.numStreamClients;
        }
        else {
            this.numStreamClients = topic_configurations_1.NUM_DEFAULT_STREAM_CLIENTS;
        }
        if (props.numUnaryClients !== undefined && props.numUnaryClients !== null) {
            this.numUnaryClients = props.numUnaryClients;
        }
        else {
            this.numUnaryClients = topic_configurations_1.NUM_DEFAULT_UNARY_CLIENTS;
        }
        if (props.numClients !== undefined && props.numClients !== null) {
            this.numClients = props.numClients;
        }
        this.keepAliveTimeMs = props.keepAliveTimeMs;
        this.keepAliveTimeoutMs = props.keepAliveTimeoutMs;
        this.keepAlivePermitWithoutCalls = props.keepAlivePermitWithoutCalls;
        this.deadlineMillis = props.deadlineMillis;
    }
    getNumClients() {
        return this.numClients;
    }
    getNumStreamClients() {
        return this.numStreamClients;
    }
    getNumUnaryClients() {
        return this.numUnaryClients;
    }
    withNumClients(numClients) {
        return new StaticTopicGrpcConfiguration({
            ...this,
            numClients,
        });
    }
    withNumStreamClients(numStreamClients) {
        return new StaticTopicGrpcConfiguration({
            ...this,
            numStreamClients,
        });
    }
    withNumUnaryClients(numUnaryClients) {
        return new StaticTopicGrpcConfiguration({
            ...this,
            numUnaryClients,
        });
    }
    getKeepAliveTimeoutMS() {
        return this.keepAliveTimeoutMs;
    }
    getKeepAliveTimeMS() {
        return this.keepAliveTimeMs;
    }
    getKeepAlivePermitWithoutCalls() {
        return this.keepAlivePermitWithoutCalls;
    }
    getDeadlineMillis() {
        return this.deadlineMillis;
    }
    withDeadlineMillis(deadlineMillis) {
        return new StaticTopicGrpcConfiguration({
            ...this,
            deadlineMillis,
        });
    }
}
exports.StaticTopicGrpcConfiguration = StaticTopicGrpcConfiguration;
class StaticTopicTransportStrategy {
    constructor(props) {
        this.grpcConfiguration = props.grpcConfiguration;
    }
    getGrpcConfig() {
        return this.grpcConfiguration;
    }
    withGrpcConfig(grpcConfiguration) {
        return new StaticTopicTransportStrategy({
            ...this,
            grpcConfiguration,
        });
    }
    withClientTimeoutMillis(clientTimeoutMillis) {
        return new StaticTopicTransportStrategy({
            ...this,
            grpcConfiguration: this.grpcConfiguration.withDeadlineMillis(clientTimeoutMillis),
        });
    }
}
exports.StaticTopicTransportStrategy = StaticTopicTransportStrategy;
//# sourceMappingURL=data:application/json;base64,