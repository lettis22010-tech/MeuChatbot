"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicClientConfiguration = void 0;
class TopicClientConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.transportStrategy = props.transportStrategy;
        this.throwOnErrors = props.throwOnErrors;
        this.middlewares = props.middlewares;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withTransportStrategy(transportStrategy) {
        return new TopicClientConfiguration({
            ...this,
            transportStrategy,
        });
    }
    withNumConnections(numConnections) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withNumClients(numConnections)));
    }
    withNumStreamConnections(numConnections) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withNumStreamClients(numConnections)));
    }
    withNumUnaryConnections(numConnections) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withNumUnaryClients(numConnections)));
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new TopicClientConfiguration({
            ...this,
            throwOnErrors,
        });
    }
    getMiddlewares() {
        return this.middlewares;
    }
    withMiddlewares(middlewares) {
        return new TopicClientConfiguration({
            ...this,
            middlewares,
        });
    }
    addMiddleware(middleware) {
        return new TopicClientConfiguration({
            ...this,
            middlewares: [middleware, ...this.middlewares],
        });
    }
    withClientTimeoutMillis(clientTimeoutMillis) {
        return new TopicClientConfiguration({
            ...this,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),
        });
    }
}
exports.TopicClientConfiguration = TopicClientConfiguration;
//# sourceMappingURL=data:application/json;base64,