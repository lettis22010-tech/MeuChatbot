"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubsubClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const __1 = require("../");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const AbstractPubsubClient_1 = require("@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractPubsubClient");
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const utils_2 = require("@gomomento/sdk-core/dist/src/utils");
var grpcPubsub = generated_types_1.pubsub.cache_client.pubsub;
class PubsubClient extends AbstractPubsubClient_1.AbstractPubsubClient {
    // private static readonly RST_STREAM_NO_ERROR_MESSAGE =
    //   'Received RST_STREAM with code 0';
    /**
     * @param {TopicClientProps} props
     */
    constructor(props) {
        super(props.configuration.getLoggerFactory(), props.configuration.getLoggerFactory().getLogger(PubsubClient.name), new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors()));
        this.credentialProvider = props.credentialProvider;
        this.getLogger().debug(`Creating topic client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const topicGrpcConfig = props.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs =
            topicGrpcConfig.getDeadlineMillis() ||
                PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS;
        // NOTE: This is hard-coded for now but we may want to expose it via TopicConfiguration in the
        // future, as we do with some of the other clients.
        const grpcConfig = new __1.StaticGrpcConfiguration({
            deadlineMillis: this.requestTimeoutMs,
            maxSessionMemoryMb: PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB,
            keepAlivePermitWithoutCalls: topicGrpcConfig.getKeepAlivePermitWithoutCalls(),
            keepAliveTimeMs: topicGrpcConfig.getKeepAliveTimeMS(),
            keepAliveTimeoutMs: topicGrpcConfig.getKeepAliveTimeoutMS(),
        });
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.getLogger().debug(`Creating pubsub client with channel options: ${JSON.stringify(channelOptions, null, 2)}`);
        this.client = new grpcPubsub.PubsubClient(this.credentialProvider.getCacheEndpoint(), this.credentialProvider.isCacheEndpointSecure()
            ? grpc_js_1.ChannelCredentials.createSsl()
            : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:topic:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        this.unaryInterceptors = PubsubClient.initializeUnaryInterceptors(headers, props.configuration, this.requestTimeoutMs);
        this.streamingInterceptors = PubsubClient.initializeStreamingInterceptors(headers, props.configuration);
        this.isConnectionLost = false;
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.getLogger().debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    async sendPublish(cacheName, topicName, value) {
        const topicValue = new grpcPubsub._TopicValue();
        if (typeof value === 'string') {
            topicValue.text = value;
        }
        else {
            topicValue.binary = value;
        }
        const request = new grpcPubsub._PublishRequest({
            cache_name: cacheName,
            topic: topicName,
            value: topicValue,
        });
        return await new Promise((resolve, reject) => {
            this.client.Publish(request, {
                interceptors: this.unaryInterceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.TopicPublish.Success());
                }
                else {
                    this.getCacheServiceErrorMapper().resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.TopicPublish.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    /**
     * @remark This method is responsible for restarting the stream if it ends unexpectedly.
     * Since we return a single subscription object to the user, we need to update it with the
     * unsubscribe function should we restart the stream. This is why we pass the subscription
     * state and subscription object to this method.
     *
     * Handling a cache not exists requires special care as well. In the most likely case,
     * when the subscription starts and the cache does not exist, we receive an error immediately.
     * We return an error from the subscribe method and do immediately unsubscribe. In a distinct,
     * unlikely but possible case, the user deletes the cache while the stream is running. In this
     * case we already returned a subscription object to the user, so we instead cancel the stream and
     * propagate an error to the user via the error handler.
     */
    sendSubscribe(options) {
        const request = new grpcPubsub._SubscriptionRequest({
            cache_name: options.cacheName,
            topic: options.topicName,
            resume_at_topic_sequence_number: options.subscriptionState.resumeAtTopicSequenceNumber,
            sequence_page: options.subscriptionState.lastTopicSequencePage,
        });
        this.getLogger().trace('Subscribing to topic with resume_at_topic_sequence_number %s and sequence_page %s', options.subscriptionState.resumeAtTopicSequenceNumber, options.subscriptionState.resumeAtTopicSequencePage);
        let call;
        if (options.firstMessage) {
            // If this is the first message, we want to set a deadline for the request.
            const deadline = Date.now() + this.requestTimeoutMs;
            call = this.client.Subscribe(request, {
                interceptors: this.streamingInterceptors,
                deadline: deadline,
            });
        }
        else {
            call = this.client.Subscribe(request, {
                interceptors: this.streamingInterceptors,
            });
        }
        options.subscriptionState.setSubscribed();
        // Allow the caller to cancel the stream.
        // Note that because we restart the stream on error or stream end,
        // we need to ensure we keep the same subscription object. That way
        // stream restarts are transparent to the caller.
        options.subscriptionState.unsubscribeFn = () => {
            call.cancel();
        };
        return new Promise((resolve, _reject) => {
            const prepareCallbackOptions = {
                ...options,
                resolve,
            };
            call.on('data', this.prepareDataCallback(prepareCallbackOptions));
            call.on('error', this.prepareErrorCallback(prepareCallbackOptions));
            call.on('end', this.prepareEndCallback(prepareCallbackOptions));
        });
    }
    prepareDataCallback(options) {
        return (resp) => {
            if (options.firstMessage) {
                options.resolve(options.subscription);
            }
            options.firstMessage = false;
            if (resp.has_item || resp.has_heartbeat || resp.has_discontinuity) {
                if (this.isConnectionLost) {
                    this.isConnectionLost = false;
                }
            }
            if (resp.item) {
                const sequenceNumber = resp.item.topic_sequence_number;
                const sequencePage = resp.item.sequence_page;
                options.subscriptionState.lastTopicSequenceNumber = sequenceNumber;
                options.subscriptionState.lastTopicSequencePage = sequencePage;
                this.getLogger().trace('Received an item on subscription stream; topic: %s; sequence number: %s; sequence page: %s', (0, utils_1.truncateString)(options.topicName), sequenceNumber, sequencePage);
                if (resp.item.value.text) {
                    options.onItem(new __1.TopicItem(resp.item.value.text, sequenceNumber, {
                        tokenId: resp.item.publisher_id,
                    }));
                }
                else if (resp.item.value.binary) {
                    options.onItem(new __1.TopicItem(resp.item.value.binary, sequenceNumber, {
                        tokenId: resp.item.publisher_id,
                    }));
                }
                else {
                    this.getLogger().error('Received subscription item with unknown type; topic: %s', (0, utils_1.truncateString)(options.topicName));
                    options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item value type')), options.subscription);
                }
            }
            else if (resp.heartbeat) {
                this.getLogger().trace('Received heartbeat from subscription stream; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onHeartbeat(new __1.TopicHeartbeat());
            }
            else if (resp.discontinuity) {
                const topicDiscontinuity = new __1.TopicDiscontinuity(resp.discontinuity.last_topic_sequence, resp.discontinuity.new_topic_sequence, resp.discontinuity.new_sequence_page);
                this.getLogger().trace('Received discontinuity from subscription stream; topic: %s; %s', (0, utils_1.truncateString)(options.topicName), topicDiscontinuity.toString());
                options.subscriptionState.lastTopicSequenceNumber =
                    resp.discontinuity.new_topic_sequence;
                options.subscriptionState.lastTopicSequencePage =
                    resp.discontinuity.new_sequence_page;
                options.onDiscontinuity(topicDiscontinuity);
            }
            else {
                this.getLogger().error('Received unknown subscription item; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item type')), options.subscription);
            }
        };
    }
    prepareErrorCallback(options) {
        return (err) => {
            // When the caller unsubscribes, we may get a follow on error, which we ignore.
            if (!options.subscriptionState.isSubscribed) {
                return;
            }
            const serviceError = err;
            this.getLogger().trace(`Subscription encountered an error: ${serviceError.code}: ${serviceError.message}: ${serviceError.details}`);
            const shouldReconnectSubscription = 
            // previously, we were only attempting a reconnect on this one very specific case, but our current expectation is that
            // we should err on the side of retrying. This may become a sort of "deny list" of error types to *not* retry on
            // in the future, but for now we will be aggressive about retrying.
            // // serviceError.code === Status.INTERNAL &&
            //  // serviceError.details === PubsubClient.RST_STREAM_NO_ERROR_MESSAGE;
            true;
            if (!this.isConnectionLost) {
                this.isConnectionLost = true;
                options.onConnectionLost();
            }
            const momentoError = new __1.TopicSubscribe.Error(this.getCacheServiceErrorMapper().convertError(serviceError));
            this.handleSubscribeError(options, momentoError, shouldReconnectSubscription);
        };
    }
    static initializeUnaryInterceptors(headers, configuration, requestTimeoutMs) {
        const middlewares = configuration.getMiddlewares();
        const groupMiddlewares = (isLateLoad) => middlewares.filter(middleware => { var _a; return ((_a = middleware.shouldLoadLate) !== null && _a !== void 0 ? _a : false) === isLateLoad; });
        const createMiddlewareInterceptor = (middlewareGroup) => (0, middlewares_interceptor_1.middlewaresInterceptor)(configuration.getLoggerFactory(), middlewareGroup, {});
        // Separate middlewares into immediate and late-load groups
        const immediateMiddlewares = groupMiddlewares(false);
        const lateLoadMiddlewares = groupMiddlewares(true);
        const interceptors = [
            createMiddlewareInterceptor(immediateMiddlewares),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'PubSubClient',
                loggerFactory: configuration.getLoggerFactory(),
                overallRequestTimeoutMs: requestTimeoutMs,
            }),
        ];
        if (lateLoadMiddlewares.length > 0) {
            interceptors.push(createMiddlewareInterceptor(lateLoadMiddlewares));
        }
        return interceptors;
    }
    // TODO https://github.com/momentohq/client-sdk-nodejs/issues/349
    // decide on streaming interceptors and middlewares
    static initializeStreamingInterceptors(headers, configuration) {
        const middlewares = configuration.getMiddlewares();
        const createMiddlewareInterceptor = (middlewares) => (0, middlewares_interceptor_1.middlewaresInterceptor)(configuration.getLoggerFactory(), middlewares, {});
        return [
            createMiddlewareInterceptor(middlewares),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
        ];
    }
}
exports.PubsubClient = PubsubClient;
PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS = (0, utils_2.secondsToMilliseconds)(5);
PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB = 256;
//# sourceMappingURL=data:application/json;base64,