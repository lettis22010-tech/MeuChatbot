"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalNodeGrpcPingClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcPing = generated_types_1.ping.cache_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const utils_1 = require("@gomomento/sdk-core/dist/src/utils");
class InternalNodeGrpcPingClient {
    /**
     * @param {PingClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        const headers = [
            new headers_interceptor_1.Header('agent', `nodejs:ping:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'PingClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS,
            }),
        ];
        this.logger.debug(`Creating ping client using endpoint: '${props.endpoint}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcPing.PingClient(props.endpoint, props.credentialProvider.isCacheEndpointSecure()
                ? grpc_js_1.ChannelCredentials.createSsl()
                : grpc_js_1.ChannelCredentials.createInsecure()),
            loggerFactory: props.configuration.getLoggerFactory(),
            clientTimeoutMillis: InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS,
            maxIdleMillis: props.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
    }
    async ping() {
        this.logger.info('pinging...');
        const request = new grpcPing._PingRequest();
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                .Ping(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err) {
                    this.logger.error('failed to ping');
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.InternalNodeGrpcPingClient = InternalNodeGrpcPingClient;
InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS = (0, utils_1.secondsToMilliseconds)(60);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluZy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvcGluZy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWdEO0FBQ2hELElBQU8sUUFBUSxHQUFHLHNCQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3BDLG9FQUFxRTtBQUNyRSwyQ0FBOEQ7QUFDOUQscURBQTJDO0FBQzNDLDhFQUFzRTtBQUl0RSxnRUFBMEQ7QUFDMUQsOERBQXlFO0FBUXpFLE1BQWEsMEJBQTBCO0lBT3JDOztPQUVHO0lBQ0gsWUFBWSxLQUFzQjtRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLDRCQUFNLENBQUMsT0FBTyxFQUFFLGVBQWUsc0JBQU8sRUFBRSxDQUFDO1lBQzdDLElBQUksNEJBQU0sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDakUsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLEdBQUc7WUFDbEIsdUNBQWlCLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO1lBQ25ELG9DQUFnQixDQUFDLHNCQUFzQixDQUFDO2dCQUN0QyxVQUFVLEVBQUUsWUFBWTtnQkFDeEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3JELHVCQUF1QixFQUFFLDBCQUEwQixDQUFDLGtCQUFrQjthQUN2RSxDQUFDO1NBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHlDQUF5QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQzFELENBQUM7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksZ0RBQXFCLENBQUM7WUFDN0MsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUNwQixJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQ3JCLEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFO2dCQUM5QyxDQUFDLENBQUMsNEJBQWtCLENBQUMsU0FBUyxFQUFFO2dCQUNoQyxDQUFDLENBQUMsNEJBQWtCLENBQUMsY0FBYyxFQUFFLENBQ3hDO1lBQ0gsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7WUFDckQsbUJBQW1CLEVBQUUsMEJBQTBCLENBQUMsa0JBQWtCO1lBQ2xFLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtpQkFDL0Isb0JBQW9CLEVBQUU7aUJBQ3RCLGdCQUFnQixFQUFFO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMzQyxJQUFJLENBQUMsYUFBYTtpQkFDZixTQUFTLEVBQUU7Z0JBQ1osNkRBQTZEO2lCQUM1RCxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDOUQsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBM0RILGdFQTREQztBQXpEeUIsNkNBQWtCLEdBQ3hDLElBQUEsNkJBQXFCLEVBQUMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Bpbmd9IGZyb20gJ0Bnb21vbWVudG8vZ2VuZXJhdGVkLXR5cGVzJztcbmltcG9ydCBncnBjUGluZyA9IHBpbmcuY2FjaGVfY2xpZW50O1xuaW1wb3J0IHtIZWFkZXIsIEhlYWRlckludGVyY2VwdG9yfSBmcm9tICcuL2dycGMvaGVhZGVycy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NoYW5uZWxDcmVkZW50aWFscywgSW50ZXJjZXB0b3J9IGZyb20gJ0BncnBjL2dycGMtanMnO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHtJZGxlR3JwY0NsaWVudFdyYXBwZXJ9IGZyb20gJy4vZ3JwYy9pZGxlLWdycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtDb25maWd1cmF0aW9ufSBmcm9tICcuLi9jb25maWcvY29uZmlndXJhdGlvbic7XG5pbXBvcnQge0NyZWRlbnRpYWxQcm92aWRlciwgTW9tZW50b0xvZ2dlcn0gZnJvbSAnLi4vJztcbmltcG9ydCB7UmV0cnlJbnRlcmNlcHRvcn0gZnJvbSAnLi9ncnBjL3JldHJ5LWludGVyY2VwdG9yJztcbmltcG9ydCB7c2Vjb25kc1RvTWlsbGlzZWNvbmRzfSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBQaW5nQ2xpZW50UHJvcHMge1xuICBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uO1xuICBlbmRwb2ludDogc3RyaW5nO1xuICBjcmVkZW50aWFsUHJvdmlkZXI6IENyZWRlbnRpYWxQcm92aWRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEludGVybmFsTm9kZUdycGNQaW5nQ2xpZW50IHtcbiAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRXcmFwcGVyOiBHcnBjQ2xpZW50V3JhcHBlcjxncnBjUGluZy5QaW5nQ2xpZW50PjtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnRlcmNlcHRvcnM6IEludGVyY2VwdG9yW107XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFJFUVVFU1RfVElNRU9VVF9NUzogbnVtYmVyID1cbiAgICBzZWNvbmRzVG9NaWxsaXNlY29uZHMoNjApO1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICAvKipcbiAgICogQHBhcmFtIHtQaW5nQ2xpZW50UHJvcHN9IHByb3BzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUGluZ0NsaWVudFByb3BzKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBwcm9wcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKS5nZXRMb2dnZXIodGhpcyk7XG4gICAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAgIG5ldyBIZWFkZXIoJ2FnZW50JywgYG5vZGVqczpwaW5nOiR7dmVyc2lvbn1gKSxcbiAgICAgIG5ldyBIZWFkZXIoJ3J1bnRpbWUtdmVyc2lvbicsIGBub2RlanM6JHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9YCksXG4gICAgXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IFtcbiAgICAgIEhlYWRlckludGVyY2VwdG9yLmNyZWF0ZUhlYWRlcnNJbnRlcmNlcHRvcihoZWFkZXJzKSxcbiAgICAgIFJldHJ5SW50ZXJjZXB0b3IuY3JlYXRlUmV0cnlJbnRlcmNlcHRvcih7XG4gICAgICAgIGNsaWVudE5hbWU6ICdQaW5nQ2xpZW50JyxcbiAgICAgICAgbG9nZ2VyRmFjdG9yeTogcHJvcHMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCksXG4gICAgICAgIG92ZXJhbGxSZXF1ZXN0VGltZW91dE1zOiBJbnRlcm5hbE5vZGVHcnBjUGluZ0NsaWVudC5SRVFVRVNUX1RJTUVPVVRfTVMsXG4gICAgICB9KSxcbiAgICBdO1xuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgYENyZWF0aW5nIHBpbmcgY2xpZW50IHVzaW5nIGVuZHBvaW50OiAnJHtwcm9wcy5lbmRwb2ludH1gXG4gICAgKTtcbiAgICB0aGlzLmNsaWVudFdyYXBwZXIgPSBuZXcgSWRsZUdycGNDbGllbnRXcmFwcGVyKHtcbiAgICAgIGNsaWVudEZhY3RvcnlGbjogKCkgPT5cbiAgICAgICAgbmV3IGdycGNQaW5nLlBpbmdDbGllbnQoXG4gICAgICAgICAgcHJvcHMuZW5kcG9pbnQsXG4gICAgICAgICAgcHJvcHMuY3JlZGVudGlhbFByb3ZpZGVyLmlzQ2FjaGVFbmRwb2ludFNlY3VyZSgpXG4gICAgICAgICAgICA/IENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVTc2woKVxuICAgICAgICAgICAgOiBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlSW5zZWN1cmUoKVxuICAgICAgICApLFxuICAgICAgbG9nZ2VyRmFjdG9yeTogcHJvcHMuY29uZmlndXJhdGlvbi5nZXRMb2dnZXJGYWN0b3J5KCksXG4gICAgICBjbGllbnRUaW1lb3V0TWlsbGlzOiBJbnRlcm5hbE5vZGVHcnBjUGluZ0NsaWVudC5SRVFVRVNUX1RJTUVPVVRfTVMsXG4gICAgICBtYXhJZGxlTWlsbGlzOiBwcm9wcy5jb25maWd1cmF0aW9uXG4gICAgICAgIC5nZXRUcmFuc3BvcnRTdHJhdGVneSgpXG4gICAgICAgIC5nZXRNYXhJZGxlTWlsbGlzKCksXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcGluZygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKCdwaW5naW5nLi4uJyk7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBncnBjUGluZy5fUGluZ1JlcXVlc3QoKTtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnRXcmFwcGVyXG4gICAgICAgIC5nZXRDbGllbnQoKVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIC5QaW5nKHJlcXVlc3QsIHtpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzfSwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdmYWlsZWQgdG8gcGluZycpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=