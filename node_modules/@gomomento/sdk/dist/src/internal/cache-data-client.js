"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheDataClient = exports.CONNECTION_ID_KEY = void 0;
const generated_types_1 = require("@gomomento/generated-types");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const util_1 = require("util");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const cacheclient_1 = require("@gomomento/generated-types/dist/cacheclient");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const grpc_response_types_1 = require("@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types");
const connectivity_state_1 = require("@grpc/grpc-js/build/src/connectivity-state");
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
const common_1 = require("@gomomento/generated-types/dist/common");
const utils_2 = require("@gomomento/sdk-core/dist/src/utils");
const compression_error_1 = require("../errors/compression-error");
const sdk_core_1 = require("@gomomento/sdk-core");
var grpcCache = generated_types_1.cache.cache_client;
var ECacheResult = cacheclient_1.cache_client.ECacheResult;
var _ItemGetTypeResponse = cacheclient_1.cache_client._ItemGetTypeResponse;
var _Unbounded = common_1.common._Unbounded;
var Absent = common_1.common.Absent;
var Present = common_1.common.Present;
var Equal = common_1.common.Equal;
var NotEqual = common_1.common.NotEqual;
var PresentAndNotEqual = common_1.common.PresentAndNotEqual;
var AbsentOrEqual = common_1.common.AbsentOrEqual;
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class CacheDataClient {
    /**
     * @param {CacheClientProps} props
     * @param dataClientID
     * @param semaphore
     */
    constructor(props, dataClientID, semaphore) {
        var _a, _b;
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const compression = this.configuration.getCompressionStrategy();
        if (compression !== undefined) {
            this.compressionDetails = {
                valueCompressor: compression.compressorFactory,
                compressionLevel: (_a = compression.compressionLevel) !== null && _a !== void 0 ? _a : __1.CompressionLevel.Balanced,
                autoDecompressEnabled: ((_b = compression.automaticDecompression) !== null && _b !== void 0 ? _b : __1.AutomaticDecompression.Enabled) === __1.AutomaticDecompression.Enabled,
            };
        }
        else {
            this.compressionDetails = undefined;
        }
        this.requestConcurrencySemaphore = semaphore;
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs =
            grpcConfig.getDeadlineMillis() ||
                CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating cache client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => {
                this.logger.debug(`Constructing channel for clientID ${dataClientID}`);
                return new grpcCache.ScsClient(this.credentialProvider.getCacheEndpoint(), this.credentialProvider.isCacheEndpointSecure()
                    ? grpc_js_1.ChannelCredentials.createSsl()
                    : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
            },
            loggerFactory: this.configuration.getLoggerFactory(),
            clientTimeoutMillis: this.requestTimeoutMs,
            maxIdleMillis: this.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
            maxClientAgeMillis: this.configuration
                .getTransportStrategy()
                .getMaxClientAgeMillis(),
        });
        this.textEncoder = new util_1.TextEncoder();
        this.defaultTtlSeconds = props.defaultTtlSeconds;
        // this context object is currently internal only but can be extended in the Configuration object is we wants clients
        // to be able to set it.
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:cache:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        // Not sending a head concern header is treated the same as sending a BALANCED read concern header
        const readConcern = this.configuration.getReadConcern();
        if (readConcern !== __1.ReadConcern.BALANCED) {
            headers.push(new headers_interceptor_1.Header('read-concern', readConcern));
        }
        this.interceptors = this.initializeInterceptors(headers, this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
        this.streamingInterceptors = this.initializeStreamingInterceptors(headers);
    }
    close() {
        this.logger.debug('Closing cache data client');
        this.clientWrapper.getClient().close();
    }
    connect(timeoutSeconds = 10) {
        this.logger.debug('Attempting to eagerly connect to channel');
        const deadline = new Date();
        deadline.setSeconds(deadline.getSeconds() + timeoutSeconds);
        return this.connectWithinDeadline(deadline);
    }
    connectionStateToString(state) {
        switch (state) {
            case connectivity_state_1.ConnectivityState.IDLE:
                return 'IDLE';
            case connectivity_state_1.ConnectivityState.CONNECTING:
                return 'CONNECTING';
            case connectivity_state_1.ConnectivityState.READY:
                return 'READY';
            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
                return 'TRANSIENT_FAILURE';
            case connectivity_state_1.ConnectivityState.SHUTDOWN:
                return 'SHUTDOWN';
        }
    }
    connectWithinDeadline(deadline) {
        return new Promise((resolve, reject) => {
            // Get the current state and initiate a connection
            const currentState = this.clientWrapper
                .getClient()
                .getChannel()
                .getConnectivityState(true);
            this.logger.debug(`Client connectivity state: ${currentState}`);
            if (currentState === connectivity_state_1.ConnectivityState.READY) {
                resolve();
                return;
            }
            const now = new Date();
            if (now >= deadline) {
                const errorMessage = 'Unable to connect to Momento: deadline exceeded.';
                this.logger.error(errorMessage);
                reject(new errors_1.ConnectionError(errorMessage));
                return;
            }
            this.clientWrapper
                .getClient()
                .getChannel()
                .watchConnectivityState(currentState, deadline, (error) => {
                if (error) {
                    const errorMessage = `Unable to eagerly connect to Momento. Please contact Momento if this persists. currentState: ${this.connectionStateToString(currentState)}, errorName: ${error.name} : errorMessage: ${error.message}, errorStack: ${error.stack ? error.stack : 'Stack trace undefined'}`;
                    this.logger.error(errorMessage);
                    reject(new errors_1.ConnectionError(errorMessage));
                    return;
                }
                const newState = this.clientWrapper
                    .getClient()
                    .getChannel()
                    .getConnectivityState(false);
                if (newState === connectivity_state_1.ConnectivityState.READY) {
                    this.logger.debug(`Connected! Current state: ${this.connectionStateToString(newState)}`);
                    resolve();
                }
                else if (newState === connectivity_state_1.ConnectivityState.CONNECTING) {
                    // The connection goes through the CONNECTING state before becoming READY,
                    // so we must watch it twice.
                    this.logger.debug(`Connecting! Current state: ${this.connectionStateToString(newState)}`);
                    this.connectWithinDeadline(deadline).then(resolve).catch(reject);
                }
                else {
                    const errorMessage = `Unable to connect to Momento: Unexpected connection state: ${this.connectionStateToString(newState)}., oldState: ${this.connectionStateToString(currentState)}
              Please contact Momento if this persists.`;
                    this.logger.error(errorMessage);
                    reject(new errors_1.ConnectionError(errorMessage));
                    return;
                }
            });
        });
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new __1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    convertECacheResult(result) {
        switch (result) {
            case grpcCache.ECacheResult.Hit:
                return grpc_response_types_1._ECacheResult.Hit;
            case grpcCache.ECacheResult.Invalid:
                return grpc_response_types_1._ECacheResult.Invalid;
            case grpcCache.ECacheResult.Miss:
                return grpc_response_types_1._ECacheResult.Miss;
            case grpcCache.ECacheResult.Ok:
                return grpc_response_types_1._ECacheResult.Ok;
        }
    }
    convertItemTypeResult(result) {
        switch (result) {
            case _ItemGetTypeResponse.ItemType.SCALAR:
                return __1.ItemType.SCALAR;
            case _ItemGetTypeResponse.ItemType.LIST:
                return __1.ItemType.LIST;
            case _ItemGetTypeResponse.ItemType.DICTIONARY:
                return __1.ItemType.DICTIONARY;
            case _ItemGetTypeResponse.ItemType.SET:
                return __1.ItemType.SET;
            case _ItemGetTypeResponse.ItemType.SORTED_SET:
                return __1.ItemType.SORTED_SET;
        }
    }
    // If maxConcurrentRequests is set, use the semaphore to limit the number of concurrent requests.
    // Otherwise, execute the cache operation without any rate limiting.
    async rateLimited(cacheOperation) {
        try {
            if (this.requestConcurrencySemaphore !== undefined)
                await this.requestConcurrencySemaphore.acquire();
            return await cacheOperation();
        }
        finally {
            if (this.requestConcurrencySemaphore !== undefined)
                this.requestConcurrencySemaphore.release();
        }
    }
    /**
     * Returns the TTL in milliseconds for a collection.
     * If the provided TTL is not set, it defaults to the instance's default TTL.
     * @param ttl - The CollectionTttl object containing the TTL value.
     * @returns The TTL in milliseconds.
     */
    collectionTtlOrDefaultMilliseconds(ttl) {
        var _a;
        return ((_a = ttl.ttlMilliseconds()) !== null && _a !== void 0 ? _a : (0, utils_2.secondsToMilliseconds)(this.defaultTtlSeconds));
    }
    /**
     * Returns the TTL in milliseconds.
     * If the provided TTL is not set, it defaults to the instance's default TTL.
     * @param ttl
     * @returns The TTL in milliseconds.
     */
    ttlOrDefaultMilliseconds(ttl) {
        const ttlSeconds = ttl !== null && ttl !== void 0 ? ttl : this.defaultTtlSeconds;
        return (0, utils_2.secondsToMilliseconds)(ttlSeconds);
    }
    async set(cacheName, key, value, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if ((options === null || options === void 0 ? void 0 : options.ttl) !== undefined) {
                (0, utils_1.validateTtlSeconds)(options.ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSet.Error(err));
        }
        const ttlToUse = (options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtlSeconds;
        const encodedKey = this.convert(key);
        let encodedValue = this.convert(value);
        if (options === null || options === void 0 ? void 0 : options.compress) {
            this.logger.trace('CacheClient.set; compression enabled, calling value compressor');
            if (this.compressionDetails === undefined) {
                return this.cacheServiceErrorMapper.returnOrThrowError(new compression_error_1.CompressionError('CacheClient.set', 'compress'), err => new __1.CacheSet.Error(err));
            }
            encodedValue = await this.compressionDetails.valueCompressor.compress(this.compressionDetails.compressionLevel, encodedValue);
        }
        return await this.rateLimited(async () => {
            return await this.sendSet(cacheName, encodedKey, encodedValue, ttlToUse);
        });
    }
    async sendSet(cacheName, key, value, ttl) {
        const request = new grpcCache._SetRequest({
            cache_body: value,
            cache_key: key,
            ttl_milliseconds: (0, utils_2.secondsToMilliseconds)(ttl),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Set(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSet.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setFetch(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetFetch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetFetch(cacheName, this.convert(setName));
        });
    }
    async sendSetFetch(cacheName, setName) {
        const request = new grpcCache._SetFetchRequest({
            set_name: setName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetFetch.Hit(resp.found.elements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setAddElements(cacheName, setName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetAddElements.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetAddElements(cacheName, this.convert(setName), this.convertArray(elements), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendSetAddElements(cacheName, setName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SetUnionRequest({
            set_name: setName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetUnion(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetAddElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSetAddElements.Success());
                }
            });
        });
    }
    async setContainsElement(cacheName, setName, element) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetContainsElement.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetContainsElement(cacheName, this.convert(setName), this.convert(element));
        });
    }
    async sendSetContainsElement(cacheName, setName, element) {
        const request = new grpcCache._SetContainsRequest({
            set_name: setName,
            elements: [element],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetContains(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const found_mask = resp === null || resp === void 0 ? void 0 : resp.found.contains;
                    if (found_mask === undefined || found_mask.length === 0) {
                        return reject(new __1.CacheSetContainsElement.Error(new __1.UnknownError('SetContains response missing contains mask')));
                    }
                    resolve(new __1.CacheSetContainsElement.Hit(found_mask[0]));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetContainsElement.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetContainsElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setContainsElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetContainsElements.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetContainsElements(cacheName, this.convert(setName), this.convertArray(elements));
        });
    }
    async sendSetContainsElements(cacheName, setName, elements) {
        const request = new grpcCache._SetContainsRequest({
            set_name: setName,
            elements: elements,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetContains(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetContainsElements.Hit(elements, resp === null || resp === void 0 ? void 0 : resp.found.contains));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetContainsElements.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetContainsElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setRemoveElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetRemoveElements.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetRemoveElements(cacheName, this.convert(setName), this.convertArray(elements));
        });
    }
    async sendSetRemoveElements(cacheName, setName, elements) {
        const subtrahend = new grpcCache._SetDifferenceRequest._Subtrahend({
            set: new grpcCache._SetDifferenceRequest._Subtrahend._Set({
                elements: elements,
            }),
        });
        const request = new grpcCache._SetDifferenceRequest({
            set_name: setName,
            subtrahend: subtrahend,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetDifference(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSetRemoveElements.Success());
                }
            });
        });
    }
    async setSample(cacheName, setName, limit) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
            (0, utils_1.validateSetSampleLimit)(limit);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetSample.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetSample(cacheName, this.convert(setName), limit);
        });
    }
    async sendSetSample(cacheName, setName, limit) {
        const request = new grpcCache._SetSampleRequest({
            set_name: setName,
            limit: limit,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetSample(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetSample.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetSample.Hit(resp.found.elements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetSample.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setPop(cacheName, setName, count) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
            (0, utils_1.validateSetPopCount)(count);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.CacheSetPop.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetPop(cacheName, this.convert(setName), count);
        });
    }
    async sendSetPop(cacheName, setName, count) {
        const request = new grpcCache._SetPopRequest({
            set_name: setName,
            count: count,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetPop(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new sdk_core_1.CacheSetPop.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new sdk_core_1.CacheSetPop.Hit(resp.found.elements));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.CacheSetPop.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setLength(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.CacheSetLength.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetLength(cacheName, this.convert(setName));
        });
    }
    async sendSetLength(cacheName, setName) {
        const request = new grpcCache._SetLengthRequest({
            set_name: setName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new sdk_core_1.CacheSetLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new sdk_core_1.CacheSetLength.Miss());
                    }
                    else {
                        resolve(new sdk_core_1.CacheSetLength.Hit(resp.found.length));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.CacheSetLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    // setIfNotExists is deprecated on the service. Here we call the new `SetIf` method with the absent field set
    // and return `CacheSetIfNotExists` responses.
    async setIfNotExists(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfNotExists.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfNotExists(cacheName, this.convert(key), this.convert(value), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfNotExists(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent: new Absent(),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfNotExists.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotExists.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfNotExists.Error(new __1.UnknownError('SetIfNotExists responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfNotExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfAbsent(cacheName, key, value, options) {
        const ttl = options === null || options === void 0 ? void 0 : options.ttl;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfAbsent.Error(err));
        }
        return await this.rateLimited(async () => {
            let encodedValue = this.convert(value);
            if (options === null || options === void 0 ? void 0 : options.compress) {
                this.logger.trace('CacheClient.setIfAbsent; compression enabled, calling value compressor');
                if (this.compressionDetails === undefined) {
                    return this.cacheServiceErrorMapper.returnOrThrowError(new __1.InvalidArgumentError('Compressor is not set, but `CacheClient.setIfAbsent` was called with the `compress` option; please install @gomomento/sdk-nodejs-compression and call `Configuration.withCompressionStrategy` to enable compression.'), err => new __1.CacheSetIfAbsent.Error(err));
                }
                encodedValue = await this.compressionDetails.valueCompressor.compress(this.compressionDetails.compressionLevel, encodedValue);
            }
            return await this.sendSetIfAbsent(cacheName, this.convert(key), encodedValue, this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfAbsent(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent: new Absent(),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfAbsent.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfAbsent.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfAbsent.Error(new __1.UnknownError('SetIfAbsent responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfAbsent.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfPresent(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfPresent.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfPresent(cacheName, this.convert(key), this.convert(value), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfPresent(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            present: new Present(),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfPresent.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfPresent.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfPresent.Error(new __1.UnknownError('SetIfPresent responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfPresent.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfEqual(cacheName, key, value, equal, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfEqual.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfEqual(cacheName, this.convert(key), this.convert(value), this.convert(equal), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfEqual(cacheName, key, value, equal, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            equal: new Equal({ value_to_check: equal }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfEqual.Error(new __1.UnknownError('SetIfEqual responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfNotEqual(cacheName, key, value, notEqual, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfNotEqual.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfNotEqual(cacheName, this.convert(key), this.convert(value), this.convert(notEqual), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfNotEqual(cacheName, key, value, notEqual, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            not_equal: new NotEqual({ value_to_check: notEqual }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfNotEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfNotEqual.Error(new __1.UnknownError('SetIfNotEqual responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfNotEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfPresentAndNotEqual(cacheName, key, value, notEqual, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfPresentAndNotEqual.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfPresentAndNotEqual(cacheName, this.convert(key), this.convert(value), this.convert(notEqual), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfPresentAndNotEqual(cacheName, key, value, notEqual, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            present_and_not_equal: new PresentAndNotEqual({ value_to_check: notEqual }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfPresentAndNotEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfPresentAndNotEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfPresentAndNotEqual.Error(new __1.UnknownError('SetIfPresentAndNotEqual responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfPresentAndNotEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async setIfAbsentOrEqual(cacheName, key, value, equal, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetIfAbsentOrEqual.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSetIfAbsentOrEqual(cacheName, this.convert(key), this.convert(value), this.convert(equal), this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendSetIfAbsentOrEqual(cacheName, key, value, equal, ttlMilliseconds) {
        const request = new grpcCache._SetIfRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
            absent_or_equal: new AbsentOrEqual({ value_to_check: equal }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SetIf(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfAbsentOrEqual.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfAbsentOrEqual.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheSetIfAbsentOrEqual.Error(new __1.UnknownError('SetIfAbsentOrEqual responded with an unknown result')));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSetIfAbsentOrEqual.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async delete(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDelete.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDelete(cacheName, this.convert(key));
        });
    }
    async sendDelete(cacheName, key) {
        const request = new grpcCache._DeleteRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Delete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDelete.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async get(cacheName, key, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheGet.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendGet(cacheName, this.convert(key), options);
        });
    }
    async sendGet(cacheName, key, options) {
        const request = new grpcCache._GetRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Get(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a, _b;
                if (resp) {
                    switch (resp.result) {
                        case grpcCache.ECacheResult.Miss:
                            resolve(new __1.CacheGet.Miss());
                            break;
                        case grpcCache.ECacheResult.Hit: {
                            const shouldDecompress = (_a = options === null || options === void 0 ? void 0 : options.decompress) !== null && _a !== void 0 ? _a : ((_b = this.compressionDetails) === null || _b === void 0 ? void 0 : _b.autoDecompressEnabled) === true;
                            if (!shouldDecompress) {
                                resolve(new __1.CacheGet.Hit(resp.cache_body));
                            }
                            else {
                                if (this.compressionDetails === undefined) {
                                    resolve(new __1.CacheGet.Error(new compression_error_1.CompressionError('CacheClient.Get', 'decompress')));
                                }
                                else {
                                    this.compressionDetails.valueCompressor
                                        .decompressIfCompressed(resp.cache_body)
                                        .then(v => resolve(new __1.CacheGet.Hit(v)))
                                        .catch(e => resolve(
                                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                                    new __1.CacheGet.Error(new __1.InvalidArgumentError(`${e}`))));
                                }
                            }
                            break;
                        }
                        case grpcCache.ECacheResult.Invalid:
                        case grpcCache.ECacheResult.Ok:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError(resp.message)));
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('An unknown error occurred: ' + resp.message)));
                            break;
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheGet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getBatch(cacheName, keys, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheGetBatch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendGetBatch(cacheName, keys.map(key => this.convert(key)), options === null || options === void 0 ? void 0 : options.decompress);
        });
    }
    async sendGetBatch(cacheName, keys, decompress) {
        const getRequests = [];
        for (const k of keys) {
            const getRequest = new grpcCache._GetRequest({
                cache_key: k,
            });
            getRequests.push(getRequest);
        }
        const request = new grpcCache._GetBatchRequest({
            items: getRequests,
        });
        const metadata = this.createMetadata(cacheName);
        const call = this.clientWrapper.getClient().GetBatch(request, metadata, {
            interceptors: this.streamingInterceptors,
        });
        return await new Promise((resolve, reject) => {
            const results = [];
            call.on('data', (getResponse) => {
                const result = getResponse.result;
                switch (result) {
                    case grpcCache.ECacheResult.Hit:
                        results.push(new __1.CacheGet.Hit(getResponse.cache_body));
                        break;
                    case grpcCache.ECacheResult.Miss:
                        results.push(new __1.CacheGet.Miss());
                        break;
                    default:
                        results.push(new __1.CacheGet.Error(new __1.UnknownError(getResponse.message)));
                }
            });
            call.on('end', () => {
                var _a;
                const shouldDecompress = decompress !== null && decompress !== void 0 ? decompress : ((_a = this.compressionDetails) === null || _a === void 0 ? void 0 : _a.autoDecompressEnabled) === true;
                if (!shouldDecompress) {
                    resolve(new __1.CacheGetBatch.Success(results, keys));
                }
                else {
                    if (this.compressionDetails === undefined) {
                        resolve(new __1.CacheGetBatch.Error(new compression_error_1.CompressionError('CacheClient.Get', 'decompress')));
                    }
                    else {
                        const compressor = this.compressionDetails.valueCompressor;
                        Promise.all(results.map(async (r) => {
                            if (r instanceof __1.CacheGet.Hit) {
                                return new __1.CacheGet.Hit(await compressor.decompressIfCompressed(r.valueUint8Array()));
                            }
                            return r;
                        }))
                            .then(decompressedResults => resolve(new __1.CacheGetBatch.Success(decompressedResults, keys)))
                            .catch(e => 
                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                        resolve(new __1.CacheGetBatch.Error(new __1.UnknownError(`${e}`))));
                    }
                }
            });
            call.on('error', (err) => {
                this.cacheServiceErrorMapper.resolveOrRejectError({
                    err: err,
                    errorResponseFactoryFn: e => new __1.CacheGetBatch.Error(e),
                    resolveFn: resolve,
                    rejectFn: reject,
                });
            });
        });
    }
    async setBatch(cacheName, items, options) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if ((options === null || options === void 0 ? void 0 : options.ttl) !== undefined) {
                (0, utils_1.validateTtlSeconds)(options === null || options === void 0 ? void 0 : options.ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSetBatch.Error(err));
        }
        const ttlToUse = (options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtlSeconds;
        return await this.rateLimited(async () => {
            let itemsToUse = this.convertSetBatchElements(items, ttlToUse);
            if (options === null || options === void 0 ? void 0 : options.compress) {
                this.logger.trace('CacheClient.setBatch; compression enabled, calling value compressor');
                if (this.compressionDetails === undefined) {
                    return this.cacheServiceErrorMapper.returnOrThrowError(new compression_error_1.CompressionError('CacheClient.setBatch', 'compress'), err => new __1.CacheSetBatch.Error(err));
                }
                else {
                    const compressor = this.compressionDetails.valueCompressor;
                    const compressionLevel = this.compressionDetails.compressionLevel;
                    itemsToUse = await Promise.all(itemsToUse.map(async ([key, value, ttl]) => {
                        return [
                            key,
                            await compressor.compress(compressionLevel, value),
                            ttl,
                        ];
                    }));
                }
            }
            return await this.sendSetBatch(cacheName, itemsToUse);
        });
    }
    async sendSetBatch(cacheName, items) {
        const setRequests = [];
        for (const item of items) {
            const setRequest = new grpcCache._SetRequest({
                cache_key: item[0],
                cache_body: item[1],
                ttl_milliseconds: (0, utils_2.secondsToMilliseconds)(item[2]),
            });
            setRequests.push(setRequest);
        }
        const request = new grpcCache._SetBatchRequest({
            items: setRequests,
        });
        const metadata = this.createMetadata(cacheName);
        const call = this.clientWrapper.getClient().SetBatch(request, metadata, {
            interceptors: this.streamingInterceptors,
        });
        return await new Promise((resolve, reject) => {
            const results = [];
            call.on('data', (setResponse) => {
                const result = setResponse.result;
                switch (result) {
                    case grpcCache.ECacheResult.Ok:
                        results.push(new __1.CacheSet.Success());
                        break;
                    default:
                        results.push(new __1.CacheSet.Error(new __1.UnknownError(setResponse.message)));
                }
            });
            call.on('end', () => {
                resolve(new __1.CacheSetBatch.Success(results));
            });
            call.on('error', (err) => {
                this.cacheServiceErrorMapper.resolveOrRejectError({
                    err: err,
                    errorResponseFactoryFn: e => new __1.CacheSetBatch.Error(e),
                    resolveFn: resolve,
                    rejectFn: reject,
                });
            });
        });
    }
    async listConcatenateBack(cacheName, listName, values, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListConcatenateBack.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListConcatenateBack(cacheName, this.convert(listName), this.convertArray(values), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl(), truncateFrontToSize);
        });
    }
    async sendListConcatenateBack(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListConcatenateBackRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListConcatenateBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateBack.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListConcatenateBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listConcatenateFront(cacheName, listName, values, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListConcatenateFront.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListConcatenateFront(cacheName, this.convert(listName), this.convertArray(values), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl(), truncateBackToSize);
        });
    }
    async sendListConcatenateFront(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListConcatenateFrontRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListConcatenateFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateFront.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListConcatenateFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listFetch(cacheName, listName, startIndex, endIndex) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListFetch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListFetch(cacheName, this.convert(listName), startIndex, endIndex);
        });
    }
    async sendListFetch(cacheName, listName, start, end) {
        const request = new grpcCache._ListFetchRequest({
            list_name: listName,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListFetch.Hit(resp.found.values));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listRetain(cacheName, listName, startIndex, endIndex, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListRetain.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListRetain(cacheName, this.convert(listName), startIndex, endIndex, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendListRetain(cacheName, listName, start, end, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._ListRetainRequest({
            list_name: listName,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListRetain(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRetain.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListRetain.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listLength(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListLength.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListLength(cacheName, this.convert(listName));
        });
    }
    async sendListLength(cacheName, listName) {
        const request = new grpcCache._ListLengthRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListLength.Hit(resp.found.length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPopBack(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPopBack.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListPopBack(cacheName, this.convert(listName));
        });
    }
    async sendListPopBack(cacheName, listName) {
        const request = new grpcCache._ListPopBackRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPopBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopBack.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopBack.Hit(resp.found.back));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPopBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPopFront(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPopFront.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListPopFront(cacheName, this.convert(listName));
        });
    }
    async sendListPopFront(cacheName, listName) {
        const request = new grpcCache._ListPopFrontRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPopFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopFront.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopFront.Hit(resp.found.front));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPopFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPushBack(cacheName, listName, value, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPushBack.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListPushBack(cacheName, this.convert(listName), this.convert(value), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl(), truncateFrontToSize);
        });
    }
    async sendListPushBack(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListPushBackRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPushBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushBack.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPushBack.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listPushFront(cacheName, listName, value, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListPushFront.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListPushFront(cacheName, this.convert(listName), this.convert(value), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl(), truncateBackToSize);
        });
    }
    async sendListPushFront(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListPushFrontRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListPushFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushFront.Success(resp.list_length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListPushFront.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listRemoveValue(cacheName, listName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheListRemoveValue.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendListRemoveValue(cacheName, this.convert(listName), this.convert(value));
        });
    }
    async sendListRemoveValue(cacheName, listName, value) {
        const request = new grpcCache._ListRemoveRequest({
            list_name: listName,
            all_elements_with_value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ListRemove(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRemoveValue.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheListRemoveValue.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryFetch(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryFetch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryFetch(cacheName, this.convert(dictionaryName));
        });
    }
    async sendDictionaryFetch(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryFetchRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryFetch.Hit(resp.found.items));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryFetch.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionarySetField(cacheName, dictionaryName, field, value, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionarySetField.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionarySetField(cacheName, this.convert(dictionaryName), this.convert(field), this.convert(value), this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendDictionarySetField(cacheName, dictionaryName, field, value, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: this.toSingletonFieldValuePair(field, value),
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetField.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionarySetField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionarySetFields(cacheName, dictionaryName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionarySetFields.Error(err));
        }
        return await this.rateLimited(async () => {
            const dictionaryFieldValuePairs = this.convertElements(elements);
            return await this.sendDictionarySetFields(cacheName, this.convert(dictionaryName), dictionaryFieldValuePairs, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendDictionarySetFields(cacheName, dictionaryName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetFields.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionarySetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryGetField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryGetField.Error(err, this.convert(field)));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryGetField(cacheName, this.convert(dictionaryName), this.convert(field));
        });
    }
    async sendDictionaryGetField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: [field],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetField.Miss(field));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    if ((resp === null || resp === void 0 ? void 0 : resp.found.items.length) === 0) {
                        resolve(new __1.CacheDictionaryGetField.Error(new __1.UnknownError('_DictionaryGetResponseResponse contained no data but was found'), field));
                    }
                    else if ((resp === null || resp === void 0 ? void 0 : resp.found.items[0].result) === grpcCache.ECacheResult.Miss) {
                        resolve(new __1.CacheDictionaryGetField.Miss(field));
                    }
                    else {
                        resolve(new __1.CacheDictionaryGetField.Hit(resp === null || resp === void 0 ? void 0 : resp.found.items[0].cache_body, field));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryGetField.Error(e, field),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryGetFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryGetFields.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryGetFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        });
    }
    async sendDictionaryGetFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: fields,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    const items = resp.found.items.map(item => {
                        const result = this.convertECacheResult(item.result);
                        return new grpc_response_types_1._DictionaryGetResponsePart(result, item.cache_body);
                    });
                    resolve(new __1.CacheDictionaryGetFields.Hit(items, fields));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetFields.Miss());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryGetFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryRemoveField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryRemoveField.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryRemoveField(cacheName, this.convert(dictionaryName), this.convert(field));
        });
    }
    async sendDictionaryRemoveField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        request.some.fields.push(field);
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveField.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryRemoveField.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryRemoveFields.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryRemoveFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        });
    }
    async sendDictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        fields.forEach(field => request.some.fields.push(field));
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveFields.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryRemoveFields.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryLength(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryLength.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryLength(cacheName, this.convert(dictionaryName));
        });
    }
    async sendDictionaryLength(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryLengthRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryLength.Hit(resp.found.length));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async increment(cacheName, field, amount = 1, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            if (ttl !== undefined) {
                (0, utils_1.validateTtlSeconds)(ttl);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheIncrement.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendIncrement(cacheName, this.convert(field), amount, this.ttlOrDefaultMilliseconds(ttl));
        });
    }
    async sendIncrement(cacheName, field, amount = 1, ttlMilliseconds) {
        const request = new grpcCache._IncrementRequest({
            cache_key: field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().Increment(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheIncrement.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDictionaryIncrement.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDictionaryIncrement(cacheName, this.convert(dictionaryName), this.convert(field), amount, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendDictionaryIncrement(cacheName, dictionaryName, field, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionaryIncrementRequest({
            dictionary_name: dictionaryName,
            field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().DictionaryIncrement(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheDictionaryIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheDictionaryIncrement.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDictionaryIncrement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetPutElement(cacheName, sortedSetName, value, score, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetPutElement.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetPutElement(cacheName, this.convert(sortedSetName), this.convert(value), score, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendSortedSetPutElement(cacheName, sortedSetName, value, score, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: [new grpcCache._SortedSetElement({ value, score })],
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElement.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetPutElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetPutElements(cacheName, sortedSetName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetPutElements.Error(err));
        }
        return await this.rateLimited(async () => {
            const sortedSetValueScorePairs = this.convertSortedSetMapOrRecord(elements);
            return await this.sendSortedSetPutElements(cacheName, this.convert(sortedSetName), sortedSetValueScorePairs, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendSortedSetPutElements(cacheName, sortedSetName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElements.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetPutElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetRanks)(startRank, endRank);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetFetchByRank(cacheName, this.convert(sortedSetName), order, startRank, endRank);
        });
    }
    async sendSortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        const by_index = new grpcCache._SortedSetFetchRequest._ByIndex();
        if (startRank) {
            by_index.inclusive_start_index = startRank;
        }
        else {
            by_index.unbounded_start = new _Unbounded();
        }
        if (endRank) {
            by_index.exclusive_end_index = endRank;
        }
        else {
            by_index.unbounded_end = new _Unbounded();
        }
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_index: by_index,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            if (offset !== undefined) {
                (0, utils_1.validateSortedSetOffset)(offset);
            }
            if (count !== undefined) {
                (0, utils_1.validateSortedSetCount)(count);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetFetch.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetFetchByScore(cacheName, this.convert(sortedSetName), order, minScore, maxScore, offset, count);
        });
    }
    async sendSortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        const by_score = new grpcCache._SortedSetFetchRequest._ByScore();
        if (minScore !== undefined) {
            by_score.min_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: minScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_min = new _Unbounded();
        }
        if (maxScore !== undefined) {
            by_score.max_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: maxScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_max = new _Unbounded();
        }
        by_score.offset = offset !== null && offset !== void 0 ? offset : 0;
        // Note: the service reserves negative counts to mean all elements in the
        // result set.
        by_score.count = count !== null && count !== void 0 ? count : -1;
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_score: by_score,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetFetch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetGetRank(cacheName, sortedSetName, value, order) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetGetRank.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetGetRank(cacheName, this.convert(sortedSetName), this.convert(value), order);
        });
    }
    async sendSortedSetGetRank(cacheName, sortedSetName, value, order) {
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetGetRankRequest.Order.DESCENDING
            : grpcCache._SortedSetGetRankRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetGetRankRequest({
            set_name: sortedSetName,
            value: value,
            order: protoBufOrder,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetGetRank(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                var _a, _b;
                if ((resp === null || resp === void 0 ? void 0 : resp.missing) ||
                    ((_a = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _a === void 0 ? void 0 : _a.result) === ECacheResult.Miss) {
                    resolve(new __1.CacheSortedSetGetRank.Miss());
                }
                else if (((_b = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _b === void 0 ? void 0 : _b.result) === ECacheResult.Hit) {
                    if ((resp === null || resp === void 0 ? void 0 : resp.element_rank.rank) === undefined) {
                        resolve(new __1.CacheSortedSetGetRank.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetGetRank.Hit(resp.element_rank.rank));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetGetRank.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetGetScore(cacheName, sortedSetName, value) {
        const responses = await this.sortedSetGetScores(cacheName, sortedSetName, [
            value,
        ]);
        if (responses instanceof __1.CacheSortedSetGetScores.Hit) {
            return responses.responses()[0];
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Miss) {
            return new __1.CacheSortedSetGetScore.Miss(this.convert(value));
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Error) {
            return this.cacheServiceErrorMapper.returnOrThrowError(responses.innerException(), err => new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
        }
        return this.cacheServiceErrorMapper.returnOrThrowError(new __1.UnknownError('Unknown response type'), err => new __1.CacheSortedSetGetScore.Error(err, this.convert(value)));
    }
    async sortedSetGetScores(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetGetScores.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetGetScores(cacheName, this.convert(sortedSetName), values.map(value => this.convert(value)));
        });
    }
    async sendSortedSetGetScores(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetGetScoreRequest({
            set_name: sortedSetName,
            values: values,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetGetScore(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetGetScores.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const elements = resp.found.elements.map(ele => {
                        const result = this.convertECacheResult(ele.result);
                        return new grpc_response_types_1._SortedSetGetScoreResponsePart(result, ele.score);
                    });
                    resolve(new __1.CacheSortedSetGetScores.Hit(elements, values));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetGetScores.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetIncrementScore(cacheName, sortedSetName, value, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetIncrementScore.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetIncrementScore(cacheName, this.convert(sortedSetName), this.convert(value), amount, this.collectionTtlOrDefaultMilliseconds(ttl), ttl.refreshTtl());
        });
    }
    async sendSortedSetIncrementScore(cacheName, sortedSetName, value, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetIncrementRequest({
            set_name: sortedSetName,
            value: value,
            amount: amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .SortedSetIncrement(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    if (resp.score) {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(resp.score));
                    }
                    else {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(0));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetIncrementScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetRemoveElement.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetRemoveElement(cacheName, this.convert(sortedSetName), this.convert(value));
        });
    }
    async sendSortedSetRemoveElement(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: [value],
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetRemoveElement.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElement.Success());
                }
            });
        });
    }
    async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetRemoveElements.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetRemoveElements(cacheName, this.convert(sortedSetName), this.convertArray(values));
        });
    }
    async sendSortedSetRemoveElements(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: values,
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetRemoveElements.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElements.Success());
                }
            });
        });
    }
    async sortedSetLength(cacheName, sortedSetName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetLength.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetLength(cacheName, this.convert(sortedSetName));
        });
    }
    async sendSortedSetLength(cacheName, sortedSetName) {
        const request = new grpcCache._SortedSetLengthRequest({
            set_name: sortedSetName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLength.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLength.Hit(resp.found.length));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetLength.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async sortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheSortedSetLengthByScore.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendSortedSetLengthByScore(cacheName, this.convert(sortedSetName), minScore, maxScore);
        });
    }
    async sendSortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        const request = new grpcCache._SortedSetLengthByScoreRequest({
            set_name: sortedSetName,
        });
        if (minScore === undefined) {
            request.unbounded_min = new _Unbounded();
        }
        else {
            request.inclusive_min = minScore;
        }
        if (maxScore === undefined) {
            request.unbounded_max = new _Unbounded();
        }
        else {
            request.inclusive_max = maxScore;
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().SortedSetLengthByScore(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLengthByScore.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLengthByScore.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLengthByScore.Hit(resp.found.length));
                    }
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheSortedSetLengthByScore.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    initializeInterceptors(headers, loggerFactory, middlewares, middlewareRequestContext) {
        const groupMiddlewares = (isLateLoad) => middlewares.filter(middleware => { var _a; return ((_a = middleware.shouldLoadLate) !== null && _a !== void 0 ? _a : false) === isLateLoad; });
        const createMiddlewareInterceptor = (middlewareGroup) => (0, middlewares_interceptor_1.middlewaresInterceptor)(loggerFactory, middlewareGroup, middlewareRequestContext, this.clientWrapper.getClient());
        // Separate middlewares into immediate and late-load groups
        const immediateMiddlewares = groupMiddlewares(false);
        const lateLoadMiddlewares = groupMiddlewares(true);
        const interceptors = [
            createMiddlewareInterceptor(immediateMiddlewares),
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'CacheDataClient',
                loggerFactory: this.configuration.getLoggerFactory(),
                retryStrategy: this.configuration.getRetryStrategy(),
                overallRequestTimeoutMs: this.requestTimeoutMs,
            }),
        ];
        if (lateLoadMiddlewares.length > 0) {
            interceptors.push(createMiddlewareInterceptor(lateLoadMiddlewares));
        }
        return interceptors;
    }
    // TODO https://github.com/momentohq/client-sdk-nodejs/issues/349
    // decide on streaming interceptors and middlewares
    initializeStreamingInterceptors(headers) {
        return [headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers)];
    }
    convert(v) {
        if (typeof v === 'string') {
            return this.textEncoder.encode(v);
        }
        return v;
    }
    convertArray(v) {
        return v.map(i => this.convert(i));
    }
    convertElements(elements) {
        if (elements instanceof Array) {
            return this.convertElements(new Map(elements));
        }
        else if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
    }
    convertSortedSetMapOrRecord(elements) {
        if (elements instanceof Array) {
            return this.convertSortedSetMapOrRecord(new Map(elements));
        }
        else if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
    }
    convertSetBatchElements(elements, ttl) {
        if (elements instanceof Array) {
            return elements.map(element => {
                var _a;
                return [
                    this.convert(element.key),
                    this.convert(element.value),
                    (_a = element.ttl) !== null && _a !== void 0 ? _a : ttl,
                ];
            });
        }
        else if (elements instanceof Map) {
            return [...elements.entries()].map(([k, v]) => [
                this.convert(k),
                this.convert(v),
                ttl,
            ]);
        }
        else {
            return Object.entries(elements).map(element => [
                this.convert(element[0]),
                this.convert(element[1]),
                ttl,
            ]);
        }
    }
    async itemGetType(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheItemGetType.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendItemGetType(cacheName, this.convert(key));
        });
    }
    async sendItemGetType(cacheName, key) {
        const request = new grpcCache._ItemGetTypeRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ItemGetType(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetType.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetType.Hit(this.convertItemTypeResult(resp.found.item_type)));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheItemGetType.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async itemGetTtl(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheItemGetTtl.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendItemGetTtl(cacheName, this.convert(key));
        });
    }
    async sendItemGetTtl(cacheName, key) {
        const request = new grpcCache._ItemGetTtlRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().ItemGetTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetTtl.Hit(resp.found.remaining_ttl_millis));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheItemGetTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async keyExists(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheKeyExists.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendKeyExists(cacheName, this.convert(key));
        });
    }
    async sendKeyExists(cacheName, key) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: [key],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeyExists.Success(resp.exists));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheKeyExists.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async updateTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheUpdateTtl.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendUpdateTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendUpdateTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            overwrite_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheUpdateTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheUpdateTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheUpdateTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async keysExist(cacheName, keys) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheKeysExist.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendKeysExist(cacheName, this.convertArray(keys));
        });
    }
    async sendKeysExist(cacheName, keys) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: keys,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeysExist.Success(keys, resp.exists));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheKeysExist.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async increaseTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheIncreaseTtl.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendIncreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendIncreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            increase_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheIncreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.not_set) {
                    resolve(new __1.CacheIncreaseTtl.NotSet());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheIncreaseTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheIncreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async decreaseTtl(cacheName, key, ttlMilliseconds) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheDecreaseTtl.Error(err));
        }
        return await this.rateLimited(async () => {
            return await this.sendDecreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        });
    }
    async sendDecreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            decrease_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDecreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.not_set) {
                    resolve(new __1.CacheDecreaseTtl.NotSet());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheDecreaseTtl.Set());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheDecreaseTtl.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    toSingletonFieldValuePair(field, value) {
        return [
            new grpcCache._DictionaryFieldValuePair({
                field: field,
                value: value,
            }),
        ];
    }
}
exports.CacheDataClient = CacheDataClient;
CacheDataClient.DEFAULT_REQUEST_TIMEOUT_MS = (0, utils_2.secondsToMilliseconds)(5);
//# sourceMappingURL=data:application/json;base64,